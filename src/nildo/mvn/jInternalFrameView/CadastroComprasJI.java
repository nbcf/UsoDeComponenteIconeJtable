/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package nildo.mvn.jInternalFrameView;

import java.beans.Beans;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.persistence.RollbackException;
import javax.swing.JOptionPane;
import nildo.mvn.edit.CadastroEdit;

/**
 *
 * @author nil_b
 */
public class CadastroComprasJI extends javax.swing.JInternalFrame {


        private static CadastroComprasJI cadastroComprasJI;      
           
        
        public static CadastroComprasJI getEstanciaCadastroComprasJI(){
           if(cadastroComprasJI == null){
           cadastroComprasJI = new CadastroComprasJI();
           }
           return cadastroComprasJI;
           }

     
    public CadastroComprasJI() {

        initComponents();
   
        if (!Beans.isDesignTime()) {
            entityManager.getTransaction().begin();
        }
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    
    
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        Map map = new HashMap();
        map.put("javax.persistence.jdbc.url", "jdbc:mysql://localhost:3306/teste_tabela_png?zeroDateTimeBehavior=convertToNull");
        map.put("javax.persistence.jdbc.user","root");
        map.put("javax.persistence.jdbc.driver","com.mysql.jdbc.Driver");
        map.put("javax.persistence.jdbc.password","admin");
        entityManager = java.beans.Beans.isDesignTime() ? null : javax.persistence.Persistence.createEntityManagerFactory("teste_tabela_png?zeroDateTimeBehavior=convertToNullPU",map).createEntityManager();
        query = java.beans.Beans.isDesignTime() ? null : entityManager.createQuery("SELECT c FROM Crud c");
        list = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : org.jdesktop.observablecollections.ObservableCollections.observableList(query.getResultList());
        imageIconCellRenderer1 = new nildo.mvn.engine.ImageIconCellRenderer();
        rowColorRenderer1 = new nildo.mvn.engine.RowColorRenderer();
        jPanel1 = new javax.swing.JPanel();
        jToolBar1 = new javax.swing.JToolBar();
        jbt_novo = new javax.swing.JButton();
        jbt_atualizar = new javax.swing.JButton();
        jbt_excluir = new javax.swing.JButton();
        jbt_salvar = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        masterTable = new javax.swing.JTable();

        imageIconCellRenderer1.setText("imageIconCellRenderer1");

        rowColorRenderer1.setText("rowColorRenderer1");

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/nildo/mvn/image/advanced.png"))); // NOI18N
        getContentPane().setLayout(new java.awt.GridBagLayout());

        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel1.setLayout(new java.awt.GridBagLayout());

        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);

        jbt_novo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/nildo/mvn/image/adicionar.png"))); // NOI18N
        jbt_novo.setText("Novo");
        jbt_novo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jbt_novo.setMaximumSize(new java.awt.Dimension(100, 50));
        jbt_novo.setMinimumSize(new java.awt.Dimension(100, 50));
        jbt_novo.setPreferredSize(new java.awt.Dimension(100, 50));
        jbt_novo.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jbt_novo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbt_novoActionPerformed(evt);
            }
        });
        jToolBar1.add(jbt_novo);

        jbt_atualizar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/nildo/mvn/image/atualizar.png"))); // NOI18N
        jbt_atualizar.setText("Atualizar");
        jbt_atualizar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jbt_atualizar.setMaximumSize(new java.awt.Dimension(100, 50));
        jbt_atualizar.setMinimumSize(new java.awt.Dimension(100, 50));
        jbt_atualizar.setPreferredSize(new java.awt.Dimension(100, 50));
        jbt_atualizar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jbt_atualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbt_atualizarActionPerformed(evt);
            }
        });
        jToolBar1.add(jbt_atualizar);

        jbt_excluir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/nildo/mvn/image/excluir_lixeira_verde.png"))); // NOI18N
        jbt_excluir.setText("Excluir");
        jbt_excluir.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jbt_excluir.setMaximumSize(new java.awt.Dimension(100, 50));
        jbt_excluir.setMinimumSize(new java.awt.Dimension(100, 50));
        jbt_excluir.setPreferredSize(new java.awt.Dimension(100, 50));
        jbt_excluir.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jbt_excluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbt_excluirActionPerformed(evt);
            }
        });
        jToolBar1.add(jbt_excluir);

        jbt_salvar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/nildo/mvn/image/salvar.png"))); // NOI18N
        jbt_salvar.setText("Salvar");
        jbt_salvar.setFocusable(false);
        jbt_salvar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jbt_salvar.setMaximumSize(new java.awt.Dimension(100, 50));
        jbt_salvar.setMinimumSize(new java.awt.Dimension(100, 50));
        jbt_salvar.setPreferredSize(new java.awt.Dimension(100, 50));
        jbt_salvar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jbt_salvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbt_salvarActionPerformed(evt);
            }
        });
        jToolBar1.add(jbt_salvar);
        jToolBar1.add(jPanel2);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.weightx = 1.0;
        jPanel1.add(jToolBar1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        getContentPane().add(jPanel1, gridBagConstraints);

        masterTable.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        masterTable.setRowHeight(32);

        org.jdesktop.swingbinding.JTableBinding jTableBinding = org.jdesktop.swingbinding.SwingBindings.createJTableBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, list, masterTable);
        org.jdesktop.swingbinding.JTableBinding.ColumnBinding columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${crudId}"));
        columnBinding.setColumnName("CODIGO");
        columnBinding.setColumnClass(Integer.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${nome}"));
        columnBinding.setColumnName("CLIENTE");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${descricao}"));
        columnBinding.setColumnName("COMPRA");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${valor}"));
        columnBinding.setColumnName("VALOR");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${status}"));
        columnBinding.setColumnName("ESTATUS");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        bindingGroup.addBinding(jTableBinding);
        jTableBinding.bind();
        masterTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                masterTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(masterTable);
        if (masterTable.getColumnModel().getColumnCount() > 0) {
            masterTable.getColumnModel().getColumn(0).setCellRenderer(rowColorRenderer1);
            masterTable.getColumnModel().getColumn(1).setCellRenderer(rowColorRenderer1);
            masterTable.getColumnModel().getColumn(2).setCellRenderer(rowColorRenderer1);
            masterTable.getColumnModel().getColumn(3).setCellRenderer(rowColorRenderer1);
            masterTable.getColumnModel().getColumn(4).setCellRenderer(imageIconCellRenderer1);
        }

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(jScrollPane1, gridBagConstraints);

        bindingGroup.bind();

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jbt_salvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbt_salvarActionPerformed
     salvar();
    }//GEN-LAST:event_jbt_salvarActionPerformed

    private void jbt_novoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbt_novoActionPerformed
  novo();
   
    }//GEN-LAST:event_jbt_novoActionPerformed

    private void jbt_excluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbt_excluirActionPerformed
        int[] selected = masterTable.getSelectedRows();
        List<nildo.mvn.model.Crud> toRemove = new ArrayList<nildo.mvn.model.Crud>(selected.length);
        for (int idx = 0; idx < selected.length; idx++) {
            nildo.mvn.model.Crud c = list.get(masterTable.convertRowIndexToModel(selected[idx]));
            toRemove.add(c);
            entityManager.remove(c);
        }
        list.removeAll(toRemove);
    }//GEN-LAST:event_jbt_excluirActionPerformed

    private void jbt_atualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbt_atualizarActionPerformed
       
    }//GEN-LAST:event_jbt_atualizarActionPerformed

    private void masterTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_masterTableMouseClicked
 if (evt.getClickCount() == 2 && !evt.isConsumed()) {
      evt.consume();
       editar();
       }
    }//GEN-LAST:event_masterTableMouseClicked

    
    public void salvar(){
try {
            entityManager.getTransaction().commit();
            entityManager.getTransaction().begin();
        } catch (RollbackException rex) {
            rex.printStackTrace();
            entityManager.getTransaction().begin();
            List<nildo.mvn.model.Crud> merged = new ArrayList<nildo.mvn.model.Crud>(list.size());
            for (nildo.mvn.model.Crud c : list) {
                merged.add(entityManager.merge(c));
            }
            list.clear();
            list.addAll(merged);
             entityManager.getTransaction().rollback();
        entityManager.getTransaction().begin();
        java.util.Collection data = query.getResultList();
        for (Object entity : data) {
            entityManager.refresh(entity);
        }
        list.clear();
        list.addAll(data);
        }        // TODO add your handling code here:

}


public void novo(){

  nildo.mvn.model.Crud c = new nildo.mvn.model.Crud();
        entityManager.persist(c);
        list.add(c);
        int row = list.size() - 1;
        masterTable.setRowSelectionInterval(row, row);
        masterTable.scrollRectToVisible(masterTable.getCellRect(row, 0, true));        // TODO add your handling code here:
        
             CadastroEdit lce = new CadastroEdit(null, true);
        lce.setRegistroAtualCrud(c);
        lce.setVisible(true);
        if(lce.isConfirmaRegistro()){
          salvar();
     
        
       int opcao;
        Object[] botoes = {" SIM "," NÃO "};
        opcao = JOptionPane.showOptionDialog(null, "Deseja realizar um novo cadastro ?", "PERGUNTA DO SISTEMA", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE,null,botoes,botoes[0]);
        if (opcao ==  JOptionPane.YES_OPTION) {
                
        novo();
       
            }
        else {
        
        jbt_atualizar.doClick();
        }
        }
        else
        {
        jbt_atualizar.doClick();
        }
}



public void atualizar(){

 entityManager.getTransaction().rollback();
        entityManager.getTransaction().begin();
        java.util.Collection data = query.getResultList();
        for (Object entity : data) {
            entityManager.refresh(entity);
        }
        list.clear();
        list.addAll(data);
    
}

public void editar(){

    CadastroEdit cd_edit = new CadastroEdit(null, true);
        cd_edit.setRegistroAtualCrud(list.get(masterTable.getSelectedRow()));
        cd_edit.setVisible(true);
        if(cd_edit.isConfirmaRegistro()){
        salvar();
        //saveButton.doClick();
        }else{
       jbt_atualizar.doClick();
        }


}

public void excluir(){

        int[] selected = masterTable.getSelectedRows();
        List<nildo.mvn.model.Crud> toRemove = new ArrayList<nildo.mvn.model.Crud>(selected.length);
        for (int idx = 0; idx < selected.length; idx++) {
            nildo.mvn.model.Crud c = list.get(masterTable.convertRowIndexToModel(selected[idx]));
            toRemove.add(c);
            entityManager.remove(c);
        }
        list.removeAll(toRemove);

}



    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.persistence.EntityManager entityManager;
    private nildo.mvn.engine.ImageIconCellRenderer imageIconCellRenderer1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JButton jbt_atualizar;
    private javax.swing.JButton jbt_excluir;
    private javax.swing.JButton jbt_novo;
    private javax.swing.JButton jbt_salvar;
    private java.util.List<nildo.mvn.model.Crud> list;
    private javax.swing.JTable masterTable;
    private javax.persistence.Query query;
    private nildo.mvn.engine.RowColorRenderer rowColorRenderer1;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables
}
